/* The following code was generated by JFlex 1.4.3 on 4/6/15 12:05 PM */

/* File:   FloraProgramEditor.java
**
** Author(s): Miguel Calejo
**
** Contact:   mc@interprolog.com
**
** Copyright (C) Coherent Knowledge Systems, LLC, 2014 - 2016.
** All rights reserved.
**
*/


package com.coherentknowledge.fidji;
import com.declarativa.fiji.*;
import java.io.*;
import java.util.*;
import javax.swing.text.Segment;
import javax.swing.text.BadLocationException;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rsyntaxtextarea.modes.*;


/**
 * Scanner for Flora text.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>FloraTokenMaker.java</code> file will contain
 *       two definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Miguel Calejo / Robert Futrell
 * @version 0.1
 *
 */
@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/6/15 12:05 PM from the specification file
 * <tt>FloraTokenMaker.flex</tt>
 */
public class FloraTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int MLS = 4;
  public static final int DOCCOMMENT = 8;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\5\1\0\1\4\1\4\22\0\1\74\1\22\1\3"+
    "\1\63\1\72\1\73\1\0\1\7\1\21\1\21\1\2\1\16\1\21"+
    "\1\24\1\17\1\1\1\13\11\12\1\23\1\65\1\57\1\55\1\25"+
    "\1\26\1\56\3\10\1\14\1\15\1\14\5\10\1\20\16\10\1\66"+
    "\1\6\1\67\1\60\1\11\1\62\1\37\1\50\1\41\1\34\1\45"+
    "\1\44\1\33\1\27\1\30\2\10\1\31\1\40\1\36\1\32\1\46"+
    "\1\53\1\47\1\51\1\43\1\42\1\52\1\64\1\54\1\35\1\10"+
    "\1\70\1\61\1\71\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\1\4\1\2\1\1\2\5"+
    "\2\6\1\2\1\7\1\10\3\2\1\11\17\5\4\2"+
    "\1\10\1\5\1\12\1\10\1\1\1\2\2\13\1\14"+
    "\2\13\1\15\1\16\1\13\1\17\1\13\1\20\1\21"+
    "\1\22\1\0\1\23\21\0\1\5\1\0\1\24\2\0"+
    "\1\6\1\0\1\25\1\24\2\0\1\11\3\5\1\2"+
    "\2\5\1\2\13\5\1\2\11\5\3\0\1\2\3\0"+
    "\1\5\2\0\1\26\1\27\1\30\1\31\2\0\1\2"+
    "\17\0\1\6\1\24\1\0\10\5\1\2\15\5\1\0"+
    "\1\32\4\0\1\32\1\0\1\26\1\33\15\0\1\2"+
    "\1\0\23\5\1\0\1\32\6\0\1\26\14\0\20\5"+
    "\11\0\1\26\12\0\16\5\4\0\1\32\1\26\4\0"+
    "\1\2\1\0\14\5\10\0\13\5\10\0\13\5\3\0"+
    "\1\32\2\0\12\5\3\0\6\5\3\0\4\5\2\0"+
    "\4\5\1\0\2\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u016e\0\u040d\0\u016e\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u016e\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u016e\0\u016e\0\u0b70\0\u016e\0\u016e"+
    "\0\u0bad\0\u016e\0\u0bea\0\u016e\0\u016e\0\u0c27\0\u0c64\0\u016e"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u02dc"+
    "\0\u1034\0\u1071\0\u10ae\0\u016e\0\u10eb\0\u1128\0\u016e\0\u1165"+
    "\0\u016e\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u0319\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u1942\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u0ab9\0\u1ab0\0\u1aed\0\u016e\0\u016e\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u016e\0\u2714\0\u2751\0\u016e\0\u278e\0\u27cb\0\u2808\0\u2845"+
    "\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d"+
    "\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd"+
    "\0\u2e3a\0\u2250\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190"+
    "\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378"+
    "\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560"+
    "\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748"+
    "\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930"+
    "\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18"+
    "\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00"+
    "\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8"+
    "\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0"+
    "\0\u410d\0\u265d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b"+
    "\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463"+
    "\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b"+
    "\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833"+
    "\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b"+
    "\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03"+
    "\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7\0\u4d34\0\u4d71\0\u4dae\0\u4deb"+
    "\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59\0\u40d0\0\u4f96"+
    "\0\u4fd3\0\u5010\0\u504d\0\u508a\0\u50c7\0\u5104\0\u5141\0\u517e"+
    "\0\u51bb\0\u51f8\0\u5235\0\u5272\0\u52af\0\u52ec\0\u5329\0\u5366"+
    "\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497\0\u54d4\0\u5511\0\u554e"+
    "\0\u558b\0\u55c8\0\u5605\0\u5642\0\u567f\0\u56bc\0\u56f9\0\u5736"+
    "\0\u5773\0\u57b0\0\u57ed\0\u582a\0\u5867\0\u58a4\0\u58e1\0\u591e"+
    "\0\u595b\0\u5998";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\16\1\22\1\23\1\16\1\24"+
    "\1\22\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\16\1\34\1\16\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\16\1\47\3\16"+
    "\1\50\1\51\1\52\1\53\1\54\2\22\1\55\1\56"+
    "\1\57\3\24\1\60\1\16\1\13\1\7\1\10\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\16\1\22\1\23\1\16\1\24\1\22\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\16\1\34\1\16"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\16\1\47\3\16\1\50\1\51\1\52"+
    "\1\53\1\54\1\22\1\61\1\55\1\56\1\57\3\24"+
    "\1\60\1\16\1\13\2\62\1\63\2\62\1\64\21\62"+
    "\1\65\14\62\1\65\17\62\1\65\10\62\3\66\1\67"+
    "\1\66\1\70\21\66\1\65\14\66\1\65\17\66\1\65"+
    "\10\66\5\71\1\72\21\71\1\65\14\71\1\65\17\71"+
    "\1\65\10\71\2\62\1\73\2\62\1\74\21\62\1\65"+
    "\14\62\1\65\17\62\1\65\10\62\76\0\1\75\1\76"+
    "\1\77\73\0\1\22\75\0\1\100\75\0\2\13\66\0"+
    "\1\13\27\0\1\101\1\102\1\103\1\104\1\0\1\105"+
    "\1\0\1\106\1\107\1\110\1\0\1\111\1\112\1\113"+
    "\1\114\1\115\2\0\1\116\12\0\1\117\10\0\3\120"+
    "\1\0\1\120\1\0\1\121\1\122\65\120\10\0\6\16"+
    "\2\0\1\16\6\0\26\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\26\16\1\0\1\22\5\0\1\16"+
    "\21\0\1\123\2\20\1\124\1\125\1\0\1\126\1\127"+
    "\10\0\1\127\2\0\1\124\7\0\1\124\1\125\41\0"+
    "\2\130\1\124\1\125\1\0\1\126\1\127\10\0\1\127"+
    "\2\0\1\124\7\0\1\124\1\125\27\0\5\131\1\0"+
    "\4\131\2\132\60\131\24\0\1\133\1\22\74\0\1\134"+
    "\1\22\74\0\1\22\27\0\1\22\27\0\2\135\2\0"+
    "\2\135\2\0\1\135\3\0\1\22\2\0\26\135\1\22"+
    "\6\0\1\135\20\0\6\16\2\0\1\16\6\0\1\16"+
    "\1\136\24\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\7\16\1\137\1\16\1\140\3\16\1\141\10\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\3\16"+
    "\1\142\22\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\1\16\1\143\1\16\1\144\2\16\1\145\17\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\3\16"+
    "\1\146\22\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\14\16\1\147\11\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\3\16\1\150\7\16\1\151\2\16"+
    "\1\152\7\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\3\16\1\153\22\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\5\16\1\154\1\16\1\155\12\16"+
    "\1\156\3\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\1\157\1\160\5\16\1\161\1\162\15\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\3\16\1\163"+
    "\7\16\1\164\12\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\5\16\1\165\17\16\1\140\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\10\16\1\166\7\16"+
    "\1\167\5\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\16\16\1\170\7\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\17\16\1\171\6\16\7\0\1\16"+
    "\27\0\1\172\3\0\1\173\31\0\1\22\1\0\1\22"+
    "\26\0\1\22\10\0\1\174\2\0\1\175\27\0\1\52"+
    "\1\176\1\22\10\0\1\177\63\0\1\22\72\0\1\200"+
    "\106\0\1\24\15\0\6\16\2\0\1\16\6\0\1\201"+
    "\25\16\7\0\1\16\71\0\1\24\103\0\1\24\10\0"+
    "\2\202\1\0\1\203\2\204\2\0\2\204\2\0\1\204"+
    "\6\0\26\204\7\0\1\204\6\0\1\204\1\202\2\62"+
    "\1\0\2\62\1\0\21\62\1\0\14\62\1\0\17\62"+
    "\1\0\10\62\1\0\1\205\73\0\3\66\1\0\1\66"+
    "\1\0\21\66\1\0\14\66\1\0\17\66\1\0\10\66"+
    "\5\71\1\0\21\71\1\0\14\71\1\0\17\71\1\0"+
    "\10\71\1\0\1\206\75\0\1\207\153\0\1\210\52\0"+
    "\1\211\101\0\1\22\4\0\1\212\55\0\1\213\111\0"+
    "\1\56\57\0\1\22\101\0\1\214\5\0\1\215\65\0"+
    "\1\216\11\0\1\217\71\0\1\220\63\0\1\214\1\0"+
    "\1\221\65\0\1\222\17\0\1\223\64\0\1\114\66\0"+
    "\1\224\74\0\1\215\15\0\1\225\67\0\1\226\61\0"+
    "\1\227\45\0\4\120\1\230\1\231\1\121\1\122\64\120"+
    "\1\230\7\0\1\120\76\0\1\123\2\232\73\0\2\233"+
    "\2\0\1\234\5\0\1\234\62\0\2\132\1\0\1\125"+
    "\27\0\1\125\41\0\2\130\1\124\1\125\1\0\1\126"+
    "\14\0\1\124\7\0\1\124\1\125\41\0\2\132\1\124"+
    "\1\125\16\0\1\124\7\0\1\124\1\125\53\0\1\22"+
    "\75\0\1\22\57\0\6\135\2\0\1\135\6\0\26\135"+
    "\7\0\1\135\20\0\6\16\2\0\1\16\6\0\2\16"+
    "\1\235\23\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\5\16\1\236\20\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\17\16\1\237\6\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\3\16\1\240\6\16"+
    "\1\241\13\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\23\16\1\141\2\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\12\16\1\242\13\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\7\16\1\243\16\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\14\16"+
    "\1\141\5\16\1\47\3\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\14\16\1\244\11\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\5\16\1\245\20\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\2\16"+
    "\1\246\23\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\14\16\1\247\11\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\11\16\1\250\14\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\15\16\1\141\10\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\2\16"+
    "\1\251\23\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\16\16\1\252\7\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\20\16\1\253\5\16\7\0\1\16"+
    "\20\0\1\16\1\254\4\16\2\0\1\16\6\0\26\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\3\16"+
    "\1\255\22\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\21\16\1\256\4\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\20\16\1\257\5\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\7\16\1\260\16\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\21\16"+
    "\1\141\4\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\20\16\1\261\5\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\1\16\1\262\24\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\11\16\1\141\14\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\6\16"+
    "\1\141\17\16\7\0\1\16\27\0\1\22\132\0\1\22"+
    "\26\0\1\263\2\264\2\0\2\264\2\0\1\264\6\0"+
    "\26\264\7\0\1\264\3\0\1\177\2\0\1\264\71\0"+
    "\1\265\7\0\1\266\3\0\1\267\2\270\2\0\2\270"+
    "\2\0\1\270\6\0\26\270\7\0\1\270\4\0\1\271"+
    "\1\0\1\270\20\0\1\172\65\0\6\16\2\0\1\16"+
    "\6\0\1\16\1\256\24\16\7\0\1\16\10\0\3\203"+
    "\1\0\1\203\1\0\1\272\1\273\65\203\5\204\1\0"+
    "\67\204\1\0\1\274\74\0\1\275\144\0\1\276\61\0"+
    "\1\277\1\22\12\0\1\300\54\0\1\301\106\0\1\22"+
    "\63\0\1\22\75\0\1\56\72\0\1\302\102\0\1\303"+
    "\65\0\1\304\2\0\1\305\6\0\1\306\76\0\1\307"+
    "\71\0\1\310\103\0\1\310\55\0\1\311\112\0\1\312"+
    "\54\0\1\313\44\0\3\120\1\0\1\230\1\231\1\121"+
    "\1\122\64\120\1\230\4\0\2\231\1\120\65\0\1\231"+
    "\11\0\1\123\2\232\4\0\1\127\10\0\1\127\55\0"+
    "\2\233\1\124\17\0\1\124\7\0\1\124\42\0\2\233"+
    "\71\0\6\16\2\0\1\16\6\0\3\16\1\314\22\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\16\16"+
    "\1\315\7\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\3\16\1\316\22\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\17\16\1\141\6\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\10\16\1\317\15\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\13\16"+
    "\1\320\12\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\10\16\1\321\15\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\20\16\1\322\5\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\16\16\1\141\7\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\14\16"+
    "\1\323\11\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\10\16\1\324\15\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\17\16\1\325\6\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\16\16\1\326\7\16"+
    "\7\0\1\16\20\0\1\16\1\327\4\16\2\0\1\16"+
    "\6\0\26\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\16\16\1\330\7\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\3\16\1\331\22\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\14\16\1\141\11\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\2\16"+
    "\1\332\23\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\16\16\1\333\7\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\12\16\1\334\13\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\10\16\1\335\15\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\23\16"+
    "\1\336\2\16\7\0\1\16\10\0\3\263\1\0\1\263"+
    "\1\0\1\337\1\340\65\263\10\0\6\264\2\0\1\264"+
    "\6\0\26\264\7\0\1\264\44\0\1\341\14\0\1\342"+
    "\23\0\3\266\1\177\1\266\1\0\1\343\66\266\3\267"+
    "\1\0\1\267\1\0\1\344\1\177\65\267\3\0\1\266"+
    "\3\0\1\267\6\270\2\0\1\270\6\0\26\270\7\0"+
    "\1\270\4\0\1\271\1\0\1\270\1\0\4\203\1\345"+
    "\1\346\1\272\1\273\64\203\1\345\5\204\1\0\1\204"+
    "\1\347\65\204\61\0\1\350\56\0\1\351\6\0\1\352"+
    "\54\0\1\353\101\0\1\354\103\0\1\22\57\0\1\355"+
    "\113\0\1\356\71\0\1\357\74\0\1\360\57\0\1\361"+
    "\102\0\1\22\103\0\1\22\60\0\1\362\104\0\1\363"+
    "\64\0\1\310\53\0\6\16\2\0\1\16\6\0\4\16"+
    "\1\141\21\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\25\16\1\141\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\20\16\1\255\5\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\2\16\1\141\23\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\11\16\1\364"+
    "\14\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\11\16\1\365\14\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\1\16\1\366\24\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\1\16\1\367\24\16\7\0"+
    "\1\16\20\0\1\16\1\370\4\16\2\0\1\16\6\0"+
    "\26\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\1\16\1\371\24\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\22\16\1\372\3\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\1\16\1\373\1\16\1\374"+
    "\16\16\1\375\1\376\2\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\10\16\1\377\15\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\15\16\1\154\10\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\1\16"+
    "\1\u0100\24\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\14\16\1\u0101\11\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\2\16\1\u0102\23\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\10\16\1\u0103\15\16"+
    "\7\0\1\16\10\0\4\263\1\u0104\1\u0105\1\337\1\340"+
    "\64\263\1\u0104\7\0\1\263\132\0\1\u0106\72\0\1\u0107"+
    "\31\0\3\266\1\u0108\1\u0109\1\u010a\1\343\65\266\1\u0109"+
    "\4\267\1\u010b\1\u010c\1\344\1\177\64\267\1\u010b\3\203"+
    "\1\0\1\345\1\346\1\272\1\273\64\203\1\345\4\0"+
    "\2\346\1\203\65\0\1\346\3\347\1\204\1\347\1\0"+
    "\1\u010d\1\273\65\347\25\0\1\u010e\104\0\1\u010f\76\0"+
    "\1\u0110\73\0\1\u0111\105\0\1\22\55\0\1\u0112\111\0"+
    "\1\u0113\100\0\1\u0114\67\0\1\u0115\61\0\1\22\75\0"+
    "\1\u0116\73\0\1\u0117\53\0\6\16\2\0\1\16\6\0"+
    "\16\16\1\u0118\7\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\1\16\1\u0119\24\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\21\16\1\u011a\4\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\15\16\1\201"+
    "\10\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\17\16\1\u011b\6\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\2\16\1\u011c\23\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\22\16\1\141\3\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\7\16\1\u011d"+
    "\16\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\17\16\1\u011e\6\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\13\16\1\u011f\12\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\10\16\1\u0120\15\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\5\16\1\u0121"+
    "\20\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\4\16\1\u0122\21\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\1\16\1\u0123\24\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\2\16\1\u0124\23\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\14\16\1\u0125"+
    "\11\16\7\0\1\16\10\0\3\263\1\0\1\u0104\1\u0105"+
    "\1\337\1\340\64\263\1\u0104\4\0\2\u0105\1\263\65\0"+
    "\1\u0105\44\0\1\u0126\77\0\1\u0127\25\0\3\266\1\u0108"+
    "\1\266\1\0\1\343\1\u0128\2\u0129\2\266\2\u0129\2\266"+
    "\1\u0129\6\266\26\u0129\7\266\1\u0129\4\266\1\u012a\1\266"+
    "\1\u0129\4\266\1\177\1\u0109\1\u010a\1\343\65\266\1\u0109"+
    "\4\0\2\u010a\1\266\65\0\1\u010a\3\267\1\0\1\u010b"+
    "\1\u010c\1\344\1\177\64\267\1\u010b\4\0\2\u010c\1\267"+
    "\65\0\1\u010c\4\347\1\u012b\1\346\1\u010d\1\273\64\347"+
    "\1\u012b\57\0\1\u012c\63\0\1\310\57\0\1\223\115\0"+
    "\1\300\73\0\1\u012d\72\0\1\u012e\76\0\1\22\53\0"+
    "\1\u012f\77\0\1\u0130\100\0\1\u0131\45\0\6\16\2\0"+
    "\1\16\6\0\7\16\1\u0132\16\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\12\16\1\141\13\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\13\16\1\u0133"+
    "\12\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\20\16\1\u0134\5\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\16\16\1\u0135\7\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\12\16\1\u0136\13\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\10\16\1\u0137"+
    "\15\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\21\16\1\u0138\4\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\20\16\1\u0139\5\16\7\0\1\16\20\0"+
    "\1\16\1\u013a\4\16\2\0\1\16\6\0\26\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\7\16\1\u013b"+
    "\16\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\3\16\1\u013c\22\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\16\16\1\317\7\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\16\16\1\u013d\7\16\7\0"+
    "\1\16\55\0\1\u013e\57\0\1\u013f\44\0\3\u0128\1\177"+
    "\1\u0128\1\0\1\u0140\1\u0108\65\u0128\3\266\1\u0108\1\266"+
    "\1\0\1\343\1\u0128\6\u0129\2\266\1\u0129\6\266\26\u0129"+
    "\7\266\1\u0129\4\266\1\u012a\1\266\1\u0129\1\266\3\347"+
    "\1\204\1\u012b\1\346\1\u010d\1\273\64\347\1\u012b\61\0"+
    "\1\u0141\42\0\1\u0142\77\0\1\214\100\0\1\u0143\75\0"+
    "\1\u0144\106\0\1\u0145\33\0\6\16\2\0\1\16\6\0"+
    "\14\16\1\u0146\11\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\14\16\1\332\11\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\16\16\1\u0147\7\16\7\0"+
    "\1\16\20\0\1\16\1\u0148\4\16\2\0\1\16\6\0"+
    "\26\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\20\16\1\u0149\5\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\24\16\1\u014a\1\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\22\16\1\u014b\3\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\1\16\1\u014c"+
    "\24\16\7\0\1\16\20\0\6\16\2\0\1\16\6\0"+
    "\17\16\1\u014d\2\16\1\u014e\3\16\7\0\1\16\20\0"+
    "\1\16\1\u014f\4\16\2\0\1\16\6\0\26\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\7\16\1\141"+
    "\16\16\7\0\1\16\20\0\1\16\1\u0150\4\16\2\0"+
    "\1\16\6\0\26\16\7\0\1\16\47\0\1\u0151\76\0"+
    "\1\u0152\33\0\3\u0128\1\u0153\1\u0154\1\u0155\1\u0140\1\u0108"+
    "\64\u0128\1\u0154\54\0\1\u0156\63\0\1\u0157\76\0\1\u0158"+
    "\60\0\1\361\114\0\1\u012e\33\0\1\16\1\u0159\4\16"+
    "\2\0\1\16\6\0\26\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\5\16\1\u015a\20\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\12\16\1\u015b\13\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\16\16"+
    "\1\u015c\7\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\13\16\1\u015d\12\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\13\16\1\u015e\12\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\10\16\1\u015f\15\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\20\16"+
    "\1\u0160\5\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\1\u0161\25\16\7\0\1\16\20\0\6\16\2\0"+
    "\1\16\6\0\17\16\1\u0162\6\16\7\0\1\16\20\0"+
    "\6\16\2\0\1\16\6\0\15\16\1\u0163\10\16\7\0"+
    "\1\16\61\0\1\u0164\66\0\1\u0165\31\0\3\u0128\1\u0108"+
    "\1\u0128\1\0\1\u0140\1\u0153\2\u0166\2\u0128\2\u0166\2\u0128"+
    "\1\u0166\6\u0128\26\u0166\7\u0128\1\u0166\4\u0128\1\u0167\1\u0128"+
    "\1\u0166\4\u0128\1\177\1\u0154\1\u0155\1\u0140\1\u0108\64\u0128"+
    "\1\u0154\4\0\2\u0155\1\u0128\65\0\1\u0155\32\0\1\u0168"+
    "\101\0\1\u0169\71\0\1\22\50\0\6\16\2\0\1\16"+
    "\6\0\1\16\1\u016a\14\16\1\u016b\7\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\1\16\1\u016c\24\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\3\16"+
    "\1\u016d\22\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\11\16\1\u016e\14\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\16\16\1\u016f\7\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\11\16\1\u0170\14\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\7\16"+
    "\1\u0171\16\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\1\16\1\u0172\24\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\10\16\1\u0162\15\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\20\16\1\u0173\5\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\3\16"+
    "\1\163\22\16\7\0\1\16\40\0\1\u0174\135\0\1\271"+
    "\3\0\3\u0128\1\u0108\1\u0128\1\0\1\u0140\1\u0153\6\u0166"+
    "\2\u0128\1\u0166\6\u0128\26\u0166\7\u0128\1\u0166\4\u0128\1\u0167"+
    "\1\u0128\1\u0166\1\u0128\47\0\1\u0175\75\0\1\u0176\34\0"+
    "\6\16\2\0\1\16\6\0\11\16\1\140\14\16\7\0"+
    "\1\16\20\0\6\16\2\0\1\16\6\0\25\16\1\140"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\12\16"+
    "\1\u0177\13\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\11\16\1\u0178\14\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\16\16\1\u0179\7\16\7\0\1\16"+
    "\20\0\1\16\1\u017a\4\16\2\0\1\16\6\0\26\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\17\16"+
    "\1\u017b\6\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\14\16\1\u016f\11\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\23\16\1\u0177\2\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\16\16\1\u017c\7\16"+
    "\7\0\1\16\60\0\1\u017d\105\0\1\u017e\44\0\1\u017f"+
    "\53\0\6\16\2\0\1\16\6\0\10\16\1\u0133\15\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\11\16"+
    "\1\u0180\14\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\7\16\1\u0181\16\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\14\16\1\u0182\11\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\14\16\1\u0183\11\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\5\16"+
    "\1\141\20\16\7\0\1\16\41\0\1\u0184\124\0\1\u0185"+
    "\60\0\1\u0114\37\0\6\16\2\0\1\16\6\0\10\16"+
    "\1\u0186\15\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\14\16\1\u0187\11\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\10\16\1\u0188\15\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\1\16\1\u0189\24\16"+
    "\7\0\1\16\55\0\1\u0165\53\0\1\u018a\34\0\1\u0185"+
    "\23\0\6\16\2\0\1\16\6\0\7\16\1\u017c\16\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\10\16"+
    "\1\u018b\15\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\21\16\1\u018c\4\16\7\0\1\16\20\0\6\16"+
    "\2\0\1\16\6\0\23\16\1\u015d\2\16\7\0\1\16"+
    "\71\0\1\u018d\23\0\6\16\2\0\1\16\6\0\2\16"+
    "\1\u018e\23\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\2\16\1\u018f\23\16\7\0\1\16\13\0\1\22"+
    "\101\0\1\16\1\u0190\4\16\2\0\1\16\6\0\26\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\1\16"+
    "\1\u0191\24\16\7\0\1\16\20\0\6\16\2\0\1\16"+
    "\6\0\5\16\1\u0192\6\16\1\u0182\11\16\7\0\1\16"+
    "\20\0\6\16\2\0\1\16\6\0\7\16\1\314\16\16"+
    "\7\0\1\16\20\0\6\16\2\0\1\16\6\0\6\16"+
    "\1\145\17\16\7\0\1\16\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22997];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\12\1\1\11\1\1\1\11\31\1\1\11"+
    "\5\1\2\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\0\1\11\21\0\1\1\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\1\2\0\35\1\3\0\1\1"+
    "\3\0\1\1\2\0\1\1\2\11\1\1\2\0\1\1"+
    "\17\0\2\1\1\0\26\1\1\0\1\1\4\0\1\11"+
    "\1\0\1\1\1\11\15\0\1\1\1\0\23\1\1\0"+
    "\1\1\6\0\1\1\14\0\20\1\11\0\1\1\12\0"+
    "\16\1\4\0\2\1\4\0\1\1\1\0\14\1\10\0"+
    "\13\1\10\0\13\1\3\0\1\1\2\0\12\1\3\0"+
    "\6\1\3\0\4\1\2\0\4\1\1\0\2\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] ;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	public static final int FULL_STOP = PrologTokenMaker.FULL_STOP; // defining our tokens requires recompiling rsyntaxtextarea

	/** Marks all similar variables in same term; requires changing a couple of access qualifiers 
	in package org.fife.ui.rsyntaxtextarea */

	protected OccurrenceMarker createOccurrenceMarker() {
		return LogicProgramEditor.createOccurrenceMarker();
	}

	public boolean getMarkOccurrencesOfTokenType(int type) {
		return LogicProgramEditor.getMarkOccurrencesOfTokenType(type);
	}
	
	
	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FloraTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	protected void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	protected void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}

	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = MLS;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FloraTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FloraTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }



  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { addToken(Token.PREPROCESSOR);
          }
        case 28: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 29: break;
        case 27: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 30: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 31: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 33: break;
        case 21: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { addToken(Token.RESERVED_WORD);
          }
        case 34: break;
        case 2: 
          { addToken(Token.RESERVED_WORD);
          }
        case 35: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 36: break;
        case 9: 
          { addToken(Token.VARIABLE);
          }
        case 37: break;
        case 5: 
          { addToken(Token.IDENTIFIER);
          }
        case 38: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 39: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 40: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 41: break;
        case 7: 
          { addToken(FULL_STOP);
          }
        case 42: break;
        case 26: 
          { addToken(Token.ANNOTATION);
          }
        case 43: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 44: break;
        case 25: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 45: break;
        case 19: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 46: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 47: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 48: break;
        case 3: 
          { start = zzMarkedPos-1; yybegin(MLS);
          }
        case 49: break;
        case 10: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 50: break;
        case 6: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 52: break;
        case 11: 
          { 
          }
        case 53: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 403: break;
            case MLS: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 404: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 405: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 406: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 407: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
