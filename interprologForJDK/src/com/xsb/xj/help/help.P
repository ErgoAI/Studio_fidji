:- export generate_help/0, generate_help/2.

:- import concat_atom/2 from string.
:- import member/2, append/3 from basics.
:- import closetail/1 from listutil.
:- import path_sysop/2 from file_io.
:- import slash/1 from machine.
:- import rel_path/3 from directry.

:- import file_name_split/4 from stdutils.

:- import guiHelp/3 from usermod.

% To generate search index: C:\XSBSYS\XSBENV\jh2.0\javahelp\bin\jhindexer "HTML Dir1" "HTML Dir2"

/*
To use Java Help.

Currently Java Help might be added for dialogs and atomic fields. For dialogs a help window will appear if F1 or Help button is pressed, for atomic fields a popup will come up. 

In prolog files:
You need to use property helpid=someuniqueid for those components (top level containers and atomic fields, for now) for which you want to add documentation.

Then you need to add the following declarations:
guiHelp(someuniqueid,TOCList,DescriptionList).
 - where Description is either some text (where HTML tags might be used) or URL or a list of text/HTML descriptions.

For example,
guiHelp(newClassView,['ODE Constructor', 'Classes', 'New Class Window'],['This window allows you to create a new class. ','More info.']).

will result in a Help window coming up with a node ['ODE Constructor', 'Classes', 'New Class Window'] selected in the table of contents and the corresponding description to the right of it.

The description may also contain internal_ref(IdOrUrl,Ref) term, where IdOrUrl is id of another guiHelp.
For example, a description for id0 might have a subelement
 "['<a href=',internal_ref(id1,'#subpart'),'>a link to something</a>']" and if
 guiHelp(id1,[node1,node2,node3],['some text. <a name="#subpart"></a> more text']) then when html file for id1 is produced it is put in docs/node1/node2/node3/id1.html file, and in id0 file internal_ref(id1,'#subpart') is substituted by "docs/node1/node2/node3/id1.html#subpart".
If the description is url(URL) then the user will see URL for the node documentation.
 
guiHelp/3 declarations may either be added manually or they may be generated by readhtml from HTML file. Help id help_top is reserved.

It might be desirable sometimes not to make help description available from browsing help tree. For example, for atomic field when popup appears it actually displays only a small amount of information about it and it is not required to put that piece of information as a separate entry to be available from TOC. Then the second argument in guiHelp (TOCList) should be [].

For generation of guiHelp/3 facts from HTML file produced from MS Doc file see readhtml.P.

Generation of help files.
After some guiHelp declarations are added the next step is to generate help files that Java Help uses. The method of doing it is not thought of yet. We need all the declarations to be loaded in memory when it is done and the only way I could think of doing it is from the GUI application itself. To do it you can start your XJ application and open XSB Console from it. There type in the call : generate_help. It will recognize the call since help.P module is now loaded with XJ by default.
It will create docs directory and the necessary files in it, so make sure that you are in the directory from where your application usually starts.

After files are generated you could try pressing F1 and Help button in the forms where help is available. If your focus is in text field for which there is help description and you press F1 button a popup with help for that field will show up, not the help window for the form in which the text field is located.
*/

generate_help:-
	generate_help('help', 'Online Help', null).

generate_help(Title, Image) :-
	generate_help('help', Title, Image).

generate_help(FileName, Title, Image) :-
	build_help_tree(_, TreeList),
	create_directories(TreeList),	
	generate_help_set(FileName, Title),
	generate_map(FileName, Image),
	generate_toc(FileName, TreeList),
	% generate files to look at help without java
	generate_html_header(FileName, TreeList).

create_directories(TreeList):-
	(path_sysop(isdir, docs)
	 ->	true
	 ;	path_sysop(mkdir, docs)
	),
	create_subdirectories(TreeList, docs).

create_subdirectories([],_).
create_subdirectories([tree(Parent, ChildList)|TreeList], PathToDir):-
	(ChildList = []
	 ->	true % a leaf, will not create a directory
	 ;	slash(Slash),
		(Parent = Label-_
		 ->	make_proper_file_name(Label, NewDir)
		 ;	make_proper_file_name(Parent, NewDir)
		),
		concat_atom([PathToDir, Slash, NewDir], NewDirPath),
		(path_sysop(isdir, NewDirPath)
		 ->	true
		 ;	(path_sysop(mkdir, NewDirPath)
			 ->	true
			 ;	writeln(unable_to_create(NewDirPath)),
				fail
			)
		),
		create_subdirectories(ChildList, NewDirPath)
	),
	create_subdirectories(TreeList, PathToDir).


make_proper_file_name(Name, FileName):-
	atom_codes(Name, NameCodes),
	make_proper_file_name_codes(NameCodes, FileNameCodes),
	atom_codes(FileName, FileNameCodes).

make_proper_file_name_codes([], []).
make_proper_file_name_codes([H|T], [H|T1]):-
	help_letter_or_digit(H), !,
	make_proper_file_name_codes(T, T1).
make_proper_file_name_codes([32|T], [32|T1]):- !,
	make_proper_file_name_codes(T, T1).
make_proper_file_name_codes([_|T], [0'_|T1]):-
	make_proper_file_name_codes(T, T1).


generate_map(FileName, IconLocation):-
	concat_atom(['docs\\',FileName,'.jhm'], MapFileName),
	tell(MapFileName),
	writeln('<?xml version=''1.0'' encoding=''ISO-8859-1'' ?>
		<!DOCTYPE map
		PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp Map Version 1.0//EN"
		"http://java.sun.com/products/javahelp/map_1_0.dtd">
		<map version="1.0">'),
	dump_gui_maps(MapFileName),
	tell(MapFileName),
	(IconLocation = null
	 ->	write('<mapID target="'), write(icon_location), write('" url="'),
		write('/com/xsb/xj/images/xsb_icon.gif'),writeln('"/>')
	 ;	write('<mapID target="'), write(icon_location), write('" url="'),
		write(IconLocation),writeln('"/>')
	),
	writeln('</map>'),
	told.

dump_gui_maps(MapFileName):-
	guiHelp(HelpId, TocPath, Description),
	process_help_description(Description, HelpId, TocPath, HelpFileName),
	tell(MapFileName),
	write('<mapID target="'), write(HelpId), write('" url="'), write(HelpFileName),writeln('"/>'),
	fail.
dump_gui_maps(_).

process_help_description(url(Location), _HelpId, _TocPath, Location) :-
	atom(Location), !.
process_help_description(Description, HelpId, TocPath, HelpFileName):-
	(atom(Description) ; is_list(Description)), !,
	generate_html_name(HelpId, TocPath, Title, HelpFileName), 
	generate_html(HelpFileName, Title, Description).
process_help_description(_Description, _HelpId, _TocPath, 'about:blank').

generate_html_name(HelpId, TocPath, Title, HelpFileName):-
%	slash(Slash),
	get_path_list(TocPath, HelpId, '/', Title, PathList),
	concat_atom(PathList, HelpFileName).

get_path_list([], HelpId, _Slash, '', [HelpId1, '.html']):- !,
	make_proper_file_name(HelpId, HelpId1).
get_path_list([Title], HelpId, _Slash, Title, [HelpId1, '.html']):- !, % leaf node is a title, not a directory
	make_proper_file_name(HelpId, HelpId1).
get_path_list([Dir|TocPath], HelpId, Slash, Title, [Dir1, Slash|PathList]):-
	make_proper_file_name(Dir, Dir1),
	get_path_list(TocPath, HelpId, Slash, Title, PathList).

%% generates HTML files from the 3rd argument of guiHelp/3
generate_html(HelpFileName, Title, Description):-
	concat_atom(['docs\\',HelpFileName], HelpFile),
	tell(HelpFile),
	%% xmlns parameter to html works better (for images) for converted Doc/HTML files
	%% style tag is present for the same purpose
	write('<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
		<html xmlns:v="urn:schemas-microsoft-com:vml"> 
		<head>
		<title>'), write(Title), writeln('</title>
		<meta http-equiv="content-type"
		content="text/html">
	      <!--[if !mso]>
<style>
v\\:* {behavior:url(#default#VML);}
o\\:* {behavior:url(#default#VML);}
w\\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
		</head>
		<body>'),
	(atom(Description)
	 ->	writeln(Description)
	 ;	write_desc_list(Description, HelpFileName)
	),
	writeln('</body>
		</html>'),
	told.

write_desc_list([], _).
write_desc_list([internal_ref(Id, HREF)|Descriptions], CurrentLocation):- !,
	file_name_split(CurrentLocation, CurrentPath, _, _),
	write('"'),
	(Id = ''
	 ->	%% external link (might be a file or url, try to relavitize if a file)
		rel_path(CurrentPath, HREF, HREF0)
	 ;	(guiHelp(Id, TocPath, _) %% internal link
		 ->	generate_html_name(Id, TocPath, _Title, HelpFileName),
			rel_path(CurrentPath, HelpFileName, HelpFileRel),
			write(HelpFileRel)			
		 ;	(Id = help_top
			 ->	concat_atom(['docs/',CurrentPath], CurrentPath0),
				rel_path(CurrentPath0, docs, HelpRelDir),
				write(HelpRelDir),write('/')
			 ;	true %% reference not found.
			)
		),
		HREF0 = HREF
	),
	write(HREF0),write('"'),
	write_desc_list(Descriptions, CurrentLocation).
write_desc_list([Text|Descriptions], CurrentLocation):-
	write(Text),
	write_desc_list(Descriptions, CurrentLocation).
		
%% writes HELP SET file (.hs) which is mostly hardcoded for the exception of FileName references
% This file defines the name of the map file, and help display settings
generate_help_set(FileName, Title):-
	concat_atom(['docs\\',FileName,'.hs'], HelpSetFileName),
	tell(HelpSetFileName),
	write('<?xml version=''1.0'' encoding=''ISO-8859-1'' ?>
		<!DOCTYPE helpset
		PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp HelpSet Version 1.0//EN"
		"http://java.sun.com/products/javahelp/helpset_1_0.dtd">

		<?TestTarget this is data for the test target ?>

		<helpset version="1.0">

		<!-- title -->
		<title>Online Help</title>

		<!-- maps -->
		<maps>
		<homeID>main</homeID>
		<mapref location="'),write(FileName),writeln('.jhm"/>
		</maps>

	      <!-- views -->
	      <view>
	      <name>TOC</name>
	      <label>Online Help</label>
	      <type>javax.help.TOCView</type>
	      <data>'),write(FileName),writeln('TOC.xml</data>
	      </view>
	      <!--
	      <view>
	      <name>Index</name>
	      <label>Index</label>
	      <type>javax.help.IndexView</type>
	      <data>AgentManagerHelpIndex.xml</data>
	      </view>
	      -->
	      <view>
	      <name>Search</name>
	      <label>Search</label>
	      <type>javax.help.SearchView</type>
	      <data engine="com.sun.java.help.search.DefaultSearchEngine">
	      JavaHelpSearch
	      </data>
	      </view>

	      <view>
	      <name>Favorites</name>
	      <label>Favorites</label>
	      <type>javax.help.FavoritesView</type>
	      </view>

	      <!--
	      <view mergetype="javax.help.SortMerge">
	      <name>glossary</name>
	      <label>Glossary</name>
	      <type>javax.help.GlossaryView</type>
	      <data>Glossary.xml</data>
	      <mergetype>sort</mergetype>
	      </view>
	      -->'),
	      create_presentation(Title),
	      write('</helpset>'),
	told.

create_presentation(Title):-
	write(' <!-- presentation -->
	      <presentation default="true" displayviewimages="true">
	      <name>mainWindow</name>
	      <size width="700" height="400" />
	      <location x="200" y="200" />
	      <title>'), write(Title), write('</title>
	      <image>icon_location</image>
	      <toolbar>
	      <helpaction>javax.help.BackAction</helpaction>
	      <helpaction>javax.help.ForwardAction</helpaction>
	      <helpaction>javax.help.SeparatorAction</helpaction>
	      <helpaction>javax.help.HomeAction</helpaction>
	      <helpaction>javax.help.ReloadAction</helpaction>
	      <helpaction>javax.help.SeparatorAction</helpaction>
	      <helpaction>javax.help.PrintAction</helpaction>
	      <helpaction>javax.help.PrintSetupAction</helpaction>
	      </toolbar>
	      </presentation>

	      <presentation default="false" displayviewimages="true">
	      <name>popupWindow</name>
	      <size width="200" height="100" />
	      </presentation>').

%% generates TOC
generate_toc(FileName, TreeList):-
	concat_atom(['docs\\',FileName,'TOC.xml'], TocFileName),
	tell(TocFileName),
	writeln('<?xml version=''1.0'' encoding=''ISO-8859-1''  ?>
		<!DOCTYPE toc
		PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp TOC Version 1.0//EN"
		"http://java.sun.com/products/javahelp/toc_1_0.dtd">
		<toc version="1.0">'),
	generate_toc_tree(TreeList),

	writeln('</toc>'),
	tell(TocFileName),
	told.
		
/* Generates output of type:
    <tocitem text="Agent Manager Help">
        <tocitem text="Preferences">
            <tocitem text="Introduction" target="helpid1"/>
	    <tocitem text="Test" target="helpid2"/>
        </tocitem>
    </tocitem> */
generate_toc_tree([]).
generate_toc_tree([tree(Parent, ChildList)|OtherBranches]):-
	(Parent = Label-HelpId
	 ->	write('<tocitem text="'), write(Label), write('" target="'), write(HelpId), writeln('">')
	 ;	write('<tocitem text="'), write(Parent), writeln('">')
	),
	generate_toc_tree(ChildList),
	writeln('</tocitem>'),
	generate_toc_tree(OtherBranches).
	
build_help_tree(ListPrefix, ChildBranches):-
	findall(ListPrefix, guiHelp(_, ListPrefix, _), SubTree),
	closetail(ListPrefix),
	% find children
	findall(Child, (member(Branch, SubTree),
			append(ListPrefix, [Child|_], Branch)),
		ChildList
	       ),
	% eliminate duplicates
	sort(ChildList, SortedChildList),
	build_help_tree_list(SortedChildList, ListPrefix, ChildBranches).
	
build_help_tree_list([], _,[]).
build_help_tree_list([Child|List], ListPrefix, [tree(ChildAttr, ChildBranches)|Siblings]):-
	append(ListPrefix, [Child|_], NewPrefix),
	build_help_tree(NewPrefix, ChildBranches),
	% NewPrefix is closetailed by now
	% Attach helpid info for each node that has it
	findall(HelpId, guiHelp(HelpId, NewPrefix, _), HelpIdList),
	(HelpIdList = [HelpId|Rest]
	 ->	% intermediate or leaf node in the tree with Text attached
		(Rest = []
		 ->	true
		 ;	write('++Warning: several help ids for one TOC node '), writeln(HelpIdList)
		),
		ChildAttr = Child-HelpId
	 ;	% HelpIdList is empty list, intermediate node in the tree with no Text attached
		ChildAttr = Child
	),
	build_help_tree_list(List, ListPrefix, Siblings).

%%%%%%%%%%%%%%%%%%%%%%%%%%%
generate_html_header(FileName, TreeList):-
	concat_atom(['docs\\',FileName,'TOC.html'], TocFileName),
	tell(TocFileName),
	writeln('<html>
	         <head>
		 </head>
		 <body>'),
	writeln('<ul>'),
	generate_html_toc_tree(TreeList),
	writeln('</ul>'),
	writeln('</body>
		</html>'),
	tell(TocFileName),
	told.
		
generate_html_toc_tree([]).
generate_html_toc_tree([tree(Parent, ChildList)|OtherBranches]):-
	writeln('<li>'), 
	(Parent = Label-HelpId
	 ->	guiHelp(HelpId, TocPath, Description),
		get_help_link(Description, HelpId, TocPath, HelpFileName),
		write('<a href="'), write(HelpFileName),write('">'), write(Label), writeln('</a>')
	 ;	writeln(Parent)
	),
	writeln('<ul>'),
	generate_html_toc_tree(ChildList),
	writeln('</ul>'),
	writeln('</li>'), 
	generate_html_toc_tree(OtherBranches).

get_help_link(url(Location), _HelpId, _TocPath, Location) :-
	atom(Location), !.
get_help_link(Description, HelpId, TocPath, HelpFileName):-
	(atom(Description) ; is_list(Description)), !,
	generate_html_name(HelpId, TocPath, _Title, HelpFileName).
get_help_link(_Description, _HelpId, _TocPath, 'about:blank').


help_letter_or_digit(L) :- help_letter(L).
help_letter_or_digit(D) :- help_digit(D).

help_digit(48).
help_digit(49).
help_digit(50).
help_digit(51).
help_digit(52).
help_digit(53).
help_digit(54).
help_digit(55).
help_digit(56).
help_digit(57).

help_letter(65).	 %A
help_letter(66).
help_letter(67).
help_letter(68).
help_letter(69).
help_letter(70).
help_letter(71).
help_letter(72).
help_letter(73).
help_letter(74).
help_letter(75).
help_letter(76).
help_letter(77).
help_letter(78).
help_letter(79).
help_letter(80).
help_letter(81).
help_letter(82).
help_letter(83).
help_letter(84).
help_letter(85).
help_letter(86).
help_letter(87).
help_letter(88).
help_letter(89).
help_letter(90).	 %Z
help_letter(97).  %a
help_letter(98).
help_letter(99).
help_letter(100).
help_letter(101).
help_letter(102).
help_letter(103).
help_letter(104).
help_letter(105).
help_letter(106).
help_letter(107).
help_letter(108).
help_letter(109).
help_letter(110).
help_letter(111).
help_letter(112).
help_letter(113).
help_letter(114).
help_letter(115).
help_letter(116).
help_letter(117).
help_letter(118).
help_letter(119).
help_letter(120).
help_letter(121).
help_letter(122). 	%z
