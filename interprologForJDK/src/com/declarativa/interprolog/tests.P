:- if(current_prolog_flag(dialect, xsb)).
:- use_module(random, [random/1]).
:- use_module(basics,[ length/2]).
:- endif.
:- if(current_prolog_flag(dialect, swi)).
:- use_module(library(tabling)). % not quite working below; just to avoid syntax error
walltime(T) :- T is cputime. % approximation
:- endif.

/* Test predicates used by PrologEngineTest.java */
fac(0,0).
fac(1,1).
fac(N,X) :-
    N > 1, 
	N1 is N - 1,
	callFac(N1,X1),
	%fac(N1,X1),
	X is N*X1.

:- dynamic ipFactorial/1.

callFac(Arg,Result) :-
	ipFactorial(ObjectJava), 
	ipObjectSpec(int,IntSpec,[Arg],_),
	javaMessage(ObjectJava,ResultSpec,factorial(IntSpec)),
	ipObjectSpec('java.lang.Integer',ResultSpec,[Result],_).
	
	
fib(0,1).
fib(1,1).
fib(N,X) :-
	N > 1,
	N1 is N - 1,
	%fib(N1,X1),
	callFib(N1,X1),
	N2 is N - 2,
	%fib(N2,X2),
	callFib(N2,X2),
	X is X1+X2.
         
:- dynamic ipFibonaci/1.
        
callFib(Arg,Result) :-
	ipFibonaci(ObjectJava),
	ipObjectSpec(int,IntSpec,[Arg],_),
	javaMessage(ObjectJava,ResultSpec,fibonaci(IntSpec)),
	ipObjectSpec('java.lang.Integer',ResultSpec,[Result],_).
	
somaN(0,0).
somaN(1,1).
somaN(N,X) :-
   N > 1,
   N1 is N - 1,
   callSomaN(N1,X1),
   X is N+X1.

:- dynamic ipSomaN/1.

callSomaN(Arg,Result) :-
   ipSomaN(ObjectJava), 
   ipObjectSpec(int,IntSpec,[Arg],_),
   javaMessage(ObjectJava,ResultSpec,somaN(IntSpec)),
   ipObjectSpec('java.lang.Integer',ResultSpec,[Result],_).

buildIntList(0,[]) :-!.
buildIntList(N,[N|L]) :- NN is N-1, buildIntList(NN,L).

buildTermList(0,[]) :- !.
buildTermList(N,[minus(someFunctor,Aterm)|L]) :- % do not use operator '-', InitiallyFlatTermModel limited in SWI
	F is N/1.5, name(N,NumberL), name(S,[110|NumberL]), 
	name(AnotherF,[102|NumberL]), Aterm =..[AnotherF,N,F,S],
	NN is N-1, buildTermList(NN,L).

buildTermTree(0,t(leaf,X,leaf)) :- !, random(X).
buildTermTree(N,t(Left,X,Right)) :- 
	random(X), NN is N-1, buildTermTree(NN,Left), buildTermTree(NN,Right).

doGroundGoal(0,_) :- !.
doGroundGoal(N,G) :- NN is N-1, call(G), doGroundGoal(NN,G).

%makeHugeList(N,L) 
makeHugeList(0,[]) :- !.
makeHugeList(N,[65|L]) :- NN is N-1, makeHugeList(NN,L).

% Predicate equivalent to atomchars2utf/4 in the InterProlog DCG
fastatomchars2utf([],0,L1,Ln) :- L1=Ln.
fastatomchars2utf([C|More],N,L1,Ln) :- myC(L1,C,L2), ((C<128, !), L3=L2),
	fastatomchars2utf(More,NN,L3,L4), N is NN+1, L4=Ln.
fastatomchars2utf([C|More],N,L1,Ln) :- % this clause actually not used in performance test
	myC(L1,C1,L2), myC(L2,C2,L3),
	C<256, C1 is (192 \/ (31 /\ (C >> 6))), C2 is (128 \/ (63 /\ C)), 
	fastatomchars2utf(More,NN,L3,L4), N is NN+2, L4=Ln.

myC([Token|L],Token,L).

fastatomchars2utf2([],0).
fastatomchars2utf2([C|More],N) :- /*put(C),*/ C<128, !,
	fastatomchars2utf2(More,NN), N is NN+1.
fastatomchars2utf2([C|More],N) :- % this clause actually not used in performance test
	myC(_L1,C1,L2), myC(L2,C2,_L3),
	C<256, C1 is (192 \/ (31 /\ (C >> 6))), C2 is (128 \/ (63 /\ C)), 
	fastatomchars2utf2(More,NN), N is NN+2.

:- table win/1. % ?-win(X) will originate undefined solutions
win(X) :- move(X, Y), tnot(win(Y)) .
move((1), (2)) .
move((2), (3)) .
move((3), (4)) .
move((4), (1)) .
