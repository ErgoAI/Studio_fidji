/* 
** Author(s): Miguel Calejo
** Contact:   interprolog@declarativa.com, http://www.declarativa.com
** Copyright (C) Declarativa, Portugal, 2013
** Use and distribution, without any warranties, under the terms of the 
** GNU Library General Public License, readable in http://www.fsf.org/copyleft/lgpl.html
*/
package com.declarativa.fiji;
import java.io.*;
import java.util.*;
import javax.swing.text.Segment;
import javax.swing.text.BadLocationException;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rsyntaxtextarea.modes.*;



/**
 * Scanner for Prolog text.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>PrologTokenMaker.java</code> file will contain
 *       two definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */
@SuppressWarnings("unused")
%%

%public
%class PrologTokenMaker
%extends AbstractJFlexTokenMaker
%unicode
%type org.fife.ui.rsyntaxtextarea.Token


%{

	public static final int FULL_STOP = TokenTypes.OPERATOR; // defining our tokens requires recompiling rsyntaxtextarea

	/** Marks all similar variables in same term; requires changing a couple of access qualifiers 
	in package org.fife.ui.rsyntaxtextarea */

	protected OccurrenceMarker createOccurrenceMarker() {
		return LogicProgramEditor.createOccurrenceMarker();
	}

	public boolean getMarkOccurrencesOfTokenType(int type) {
		return LogicProgramEditor.getMarkOccurrencesOfTokenType(type);
	}
	
	
	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PrologTokenMaker() {
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	protected void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	protected void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}

	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return <code>null</code>, as there are no comments in plain text.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "%", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = MLS;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = MLA;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


%}

MLCBegin				= "/*"
MLCEnd					= "*/"
DocCommentBegin			= "/**"
StringEnd	= "\""
StringBegin 	= "\""
AtomEnd = "'"
AtomBegin = "'"

LineTerminator = \r|\n|\r\n
WhiteSpace     = {LineTerminator} | [ \t\f]

HexDigit							= ({Digit}|[A-Fa-f])
OctalDigit						= ([0-7])
EscapedSourceCharacter				= ("u"{HexDigit}{HexDigit}{HexDigit}{HexDigit})
Escape							= ("\\"(([btnfr\"'\\])|([0123]{OctalDigit}?{OctalDigit}?)|({OctalDigit}{OctalDigit}?)|{EscapedSourceCharacter}))
AnyCharacterButApostropheOrBackSlash	= ([^\\'])
/* AnyCharacterButDoubleQuoteOrBackSlash	= ([^\\\"\n]) */

CharLiteral				= ([\']({AnyCharacterButApostropheOrBackSlash}|{Escape})*[\'])
/* StringLiteral				= ([\"]({AnyCharacterButDoubleQuoteOrBackSlash}|{Escape})*[\"]) */
CharCode = 0'{AnyCharacterButApostropheOrBackSlash}' | 0'{AnyCharacterButApostropheOrBackSlash}

Letter				= ([A-Za-z])
LowerLetter			= ([a-z])
LetterOrUnderscore	= ({Letter}|"_")
LetterOrUnderscoreOrDigit	= ({LetterOrUnderscore}|[0-9])

Digit							= ("0"|{NonzeroDigit})
NonzeroDigit						= ([1-9])

FloatHelper1				= ([fFdD]?)
FloatHelper2				= ([eE][+-]?{Digit}+{FloatHelper1})
/* Was causing problems with FULL_STOP :FloatLiteral1				= ({Digit}+"."({FloatHelper1}|{FloatHelper2}|{Digit}+({FloatHelper1}|{FloatHelper2})))*/
FloatLiteral1				= ({Digit}+"."({FloatHelper2}|{Digit}+({FloatHelper1}|{FloatHelper2})))
FloatLiteral2				= ("."{Digit}+({FloatHelper1}|{FloatHelper2}))
FloatLiteral3				= ({Digit}+{FloatHelper2})
FloatLiteral				= ({FloatLiteral1}|{FloatLiteral2}|{FloatLiteral3}|({Digit}+[fFdD]))

DigitOrUnderscore			= ({Digit}|[_])
DigitsAndUnderscoresEnd		= ({DigitOrUnderscore}*{Digit})
IntegerHelper				= (({NonzeroDigit}{DigitsAndUnderscoresEnd}?)|"0")
IntegerLiteral				= ({IntegerHelper}[lL]?)

/* Prolog-specific def's. */
Comma          = ","
Cut            = "!"
/* generate the following with: current_op(P,T,Name), write('"'), write(Name), write('"|'), fail. */

Graphic        = ({Graphic1}|{Graphic2}|{Graphic3})
Graphic1	= (":-"|"-->"|":-"|"?-"|"::-"|"hilog"|"dynamic"|"multifile"|"meta_predicate"|";"|"table"|"use_variant_tabling"|"use_subsumptive_tabling"|"use_incremental_tabling"|"use_incremental_dynamic"|"use_opaque_tabling"|"thread_shared"|"thread_private"|"edb"|"index"|"ti"|"ti_off")
Graphic2 	= ("mode"|"document_export"|"export"|"parallel"|"local"|"foreign_pred"|"private_foreign_pred"|"compile_command"|"attribute"|"import"|"document_import"|"from"|"as"|"->"|","|"not"|"tnot"|"\+"|"spy"|"nospy"|"="|"\="|"=="|"@="|"\=="|"@<"|"@=<"|"@>"|"@>="|"=.."|"^=.."|"is")
Graphic3		=( "=:="|"=\="|"<"|"=<"|">"|">="|"?="|":"|"+"|"-"|"/\"|"\/"|"><"|"xor"|"+"|"-"|"\"|"*"|"/"|"//"|"mod"|"rem"|"div"|"<<"|">>"|"\\"|"**"|"\^"|"~")
Punctuation    = "("|")"|"\["|"\]"|"\{"|"|"|"\}"
Solo           = ";"|"`"

/* Actually.... we're not yet recognizing "operator-based atoms" */

Functor        		= ({LowerLetter}{LetterOrUnderscoreOrDigit}*)
Variable       		= ({LetterOrUnderscore}{LetterOrUnderscoreOrDigit}*)

%state MLC
%state MLS
%state MLA
%state EOL_COMMENT
%state DOCCOMMENT

%%

/* Normal prolog text. */
<YYINITIAL> {
	"/**/" { addToken(Token.COMMENT_MULTILINE); }  
	{DocCommentBegin}	{ start = zzMarkedPos-3; yybegin(DOCCOMMENT); }
	{MLCBegin}	{ start = zzMarkedPos-2; yybegin(MLC); }
	"%"			{ start = zzMarkedPos-1; yybegin(EOL_COMMENT); }
	^"#"{WhiteSpace}*{Letter}.*	{addToken(Token.PREPROCESSOR);}
	"\"\""	{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}
    {StringBegin}  { start = zzMarkedPos-1; yybegin(MLS); }
    /* {StringLiteral} {addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); }  */
    /* {CharLiteral} {addToken(Token.LITERAL_CHAR);} */
    "''" {addToken(Token.LITERAL_CHAR);}
    {CharCode}  {addToken(Token.LITERAL_CHAR);}
    {AtomBegin} { start = zzMarkedPos-1; yybegin(MLA); }
    {FloatLiteral} 	{addToken(Token.LITERAL_NUMBER_FLOAT); }
	{IntegerLiteral}	{ addToken(Token.LITERAL_NUMBER_DECIMAL_INT); }
    {Comma} {addToken(Token.SEPARATOR);}
    "."  /  [^ \t\n]  	{addToken(Token.RESERVED_WORD);}
    "."    	{addToken(FULL_STOP);}
    
    {Graphic} {addToken(Token.RESERVED_WORD);}
    {Punctuation} {addToken(Token.SEPARATOR);}
    {Cut} {addToken(Token.RESERVED_WORD); }
    {Solo} {addToken(Token.RESERVED_WORD);}
    {Functor} 	{addToken(Token.IDENTIFIER); }
    /* Let's not distinguish these vars: "_" {tokenType = AVARIABLE;return;} */
    {Variable} {addToken(Token.VARIABLE);}
    {WhiteSpace}+ {addToken(Token.WHITESPACE); }
	/* Ended with a line not in a string or comment. */
	<<EOF>>						{ addNullToken(); return firstToken; }
	/* Catch any other (unhandled) characters and flag them as identifiers. */
	.	{ addToken(Token.ERROR_IDENTIFIER); }
}
<MLA> {
	/* Don't understand why this does not work: */
	/* {Escape}				{} */
	/* [^hwf\\\'\n]+				{} */
	/* The above is a failed attempt to grok 'the name is \'Bond'', James Bond' */
	/* Another bug: repeated quotes are originating separate atoms */
	[^hwf\n\']+                {}
	[hwf]					{}
	\n						{ addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken; }
	{AtomEnd}					{ yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR); }
	<<EOF>>					{ addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken; }
}
<MLS> {
	[^hwf\n\"]+				{}
	[hwf]					{}
	\n						{ addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken; }
	{StringEnd}					{ yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE); }
	<<EOF>>					{ addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken; }
}
<MLC> {
	[^hwf\n\*]+				{}
	[hwf]					{}

	\n						{ addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken; }
	{MLCEnd}					{ yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE); }
	\*						{}
	<<EOF>>					{ addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken; }
}
<DOCCOMMENT> {
	[^hwf\n\*]+				{}
	[hwf]						{}

	\n							{ addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken; }
	{MLCEnd}					{ yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION); }
	\*							{}
	<<EOF>>						{ yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken; }
}
<EOL_COMMENT> {
	[^hwf\n]+				{}
	[hwf]					{}
	\n						{ addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken; }
	<<EOF>>					{ addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken; }

}

