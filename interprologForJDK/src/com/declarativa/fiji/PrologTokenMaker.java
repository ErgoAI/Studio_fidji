/* The following code was generated by JFlex 1.4.3 on 10/15/14 7:56 PM */

/* 

** Author(s): Miguel Calejo

** Contact:   interprolog@declarativa.com, http://www.declarativa.com

** Copyright (C) Declarativa, Portugal, 2013

** Use and distribution, without any warranties, under the terms of the 

** GNU Library General Public License, readable in http://www.fsf.org/copyleft/lgpl.html

*/

package com.declarativa.fiji;

import java.io.*;
import java.util.*;

import javax.swing.text.Segment;
import javax.swing.text.BadLocationException;

import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rsyntaxtextarea.modes.*;





/**

 * Scanner for Prolog text.

 *

 * This implementation was created using

 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file

 * was modified for performance.  Memory allocation needs to be almost

 * completely removed to be competitive with the handwritten lexers (subclasses

 * of <code>AbstractTokenMaker</code>), so this class has been modified so that

 * Strings are never allocated (via yytext()), and the scanner never has to

 * worry about refilling its buffer (needlessly copying chars around).

 * We can achieve this because RText always scans exactly 1 line of tokens at a

 * time, and hands the scanner this line as an array of characters (a Segment

 * really).  Since tokens contain pointers to char arrays instead of Strings

 * holding their contents, there is no need for allocating new memory for

 * Strings.<p>

 *

 * The actual algorithm generated for scanning has, of course, not been

 * modified.<p>

 *

 * If you wish to regenerate this file yourself, keep in mind the following:

 * <ul>

 *   <li>The generated <code>PrologTokenMaker.java</code> file will contain

 *       two definitions of both <code>zzRefill</code> and <code>yyreset</code>.

 *       You should hand-delete the second of each definition (the ones

 *       generated by the lexer), as these generated methods modify the input

 *       buffer, which we'll never have to do.</li>

 *   <li>You should also change the declaration/definition of zzBuffer to NOT

 *       be initialized.  This is a needless memory allocation for us since we

 *       will be pointing the array somewhere else anyway.</li>

 *   <li>You should NOT call <code>yylex()</code> on the generated scanner

 *       directly; rather, you should use <code>getTokenList</code> as you would

 *       with any other <code>TokenMaker</code> instance.</li>

 * </ul>

 *

 * @author Robert Futrell

 * @version 0.5

 *

 */
@SuppressWarnings("unused")
public class PrologTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 8;
  public static final int MLS = 4;
  public static final int DOCCOMMENT = 10;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int MLA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\6\1\0\1\5\1\5\22\0\1\65\1\33\1\3"+
    "\1\64\1\0\1\63\1\0\1\4\1\32\1\32\1\2\1\26\1\32"+
    "\1\35\1\27\1\1\1\15\3\10\4\10\2\10\1\34\1\33\1\60"+
    "\1\56\1\36\1\37\1\57\3\7\1\21\1\24\1\21\5\7\1\30"+
    "\16\7\1\32\1\12\1\32\1\61\1\20\1\33\1\46\1\14\1\16"+
    "\1\23\1\25\1\22\1\43\1\40\1\41\2\17\1\31\1\47\1\45"+
    "\1\42\1\51\1\54\1\13\1\52\1\50\1\11\1\53\1\66\1\55"+
    "\1\44\1\17\1\32\1\62\1\32\1\33\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\2\10\1\7\4\10\1\11\1\10\1\12"+
    "\3\2\1\1\10\10\1\2\1\1\2\2\1\13\1\1"+
    "\2\14\1\15\2\14\1\16\1\17\1\14\1\20\1\21"+
    "\1\14\1\22\1\14\1\23\1\24\1\0\1\25\1\26"+
    "\1\0\1\27\2\0\1\7\2\10\2\0\10\10\1\30"+
    "\1\27\1\10\2\0\2\10\1\2\6\10\1\2\5\10"+
    "\2\0\1\2\2\0\1\31\1\32\1\33\1\34\1\0"+
    "\1\7\1\27\1\0\1\10\1\26\13\10\1\2\6\10"+
    "\1\35\1\0\21\10\1\0\17\10\1\0\16\10\1\0"+
    "\13\10\1\0\13\10\1\0\13\10\1\0\12\10\1\0"+
    "\6\10\1\0\4\10\1\0\4\10\1\0\2\10\1\0"+
    "\5\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0181\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u0181\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u0181\0\u08cf\0\u0906\0\u093d\0\u0181"+
    "\0\u0181\0\u0974\0\u0181\0\u0181\0\u09ab\0\u0181\0\u0181\0\u09e2"+
    "\0\u0181\0\u0a19\0\u0181\0\u0a50\0\u0a87\0\u0181\0\u0181\0\u0abe"+
    "\0\u0181\0\u0af5\0\u0b2c\0\u0181\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0181\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u03a7"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u120c\0\u1243"+
    "\0\u08cf\0\u127a\0\u0181\0\u0181\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u025d\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u0181\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1658\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909"+
    "\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\23\2\16"+
    "\1\26\1\27\1\16\1\30\1\21\1\31\1\16\1\32"+
    "\1\33\1\21\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\23\1\42\1\43\1\44\1\45\1\46\1\47\3\23"+
    "\1\50\1\51\1\52\1\53\1\33\1\54\1\10\1\15"+
    "\1\23\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\23"+
    "\2\16\1\26\1\27\1\16\1\30\1\21\1\31\1\16"+
    "\1\32\1\33\1\21\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\3\23\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\3\23\1\50\1\51\1\52\1\53\1\33\1\54\1\55"+
    "\1\15\1\23\2\56\1\57\3\56\1\60\13\56\1\61"+
    "\15\56\1\61\25\56\1\61\3\62\1\63\2\62\1\64"+
    "\13\62\1\61\15\62\1\61\25\62\1\61\4\65\1\66"+
    "\1\65\1\67\13\65\1\61\15\65\1\61\25\65\1\61"+
    "\6\70\1\71\13\70\1\61\15\70\1\61\25\70\1\61"+
    "\2\56\1\72\3\56\1\73\13\56\1\61\15\56\1\61"+
    "\25\56\1\61\70\0\1\21\1\74\1\75\65\0\1\21"+
    "\67\0\1\76\67\0\1\77\67\0\2\15\56\0\1\15"+
    "\10\0\3\16\1\0\13\16\2\0\2\16\6\0\16\16"+
    "\10\0\1\16\10\0\1\17\4\0\1\17\2\0\1\100"+
    "\3\101\2\102\1\0\1\103\2\104\44\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\12\23\1\105\3\23\10\0"+
    "\1\23\7\0\3\23\1\0\12\23\1\106\2\0\2\23"+
    "\6\0\16\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\4\0\1\107"+
    "\3\0\1\110\4\0\1\110\3\0\3\101\2\102\1\0"+
    "\1\103\2\104\44\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\2\23\1\111\13\23\10\0\1\23\7\0\3\23"+
    "\1\0\1\112\12\23\2\0\2\23\6\0\2\23\1\113"+
    "\13\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\1\23\1\114\1\115\1\23\1\116\11\23"+
    "\10\0\1\23\7\0\3\23\1\0\10\23\1\117\2\23"+
    "\2\0\2\23\6\0\15\23\1\120\10\0\1\23\6\121"+
    "\1\0\1\121\1\122\4\121\1\122\47\121\1\0\1\121"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\2\23"+
    "\1\123\13\23\10\0\1\23\34\0\1\124\1\21\66\0"+
    "\1\125\1\21\66\0\1\21\17\0\1\21\45\0\1\21"+
    "\20\0\1\21\17\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\1\23\1\126\14\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\5\23\1\127\1\23"+
    "\1\120\2\23\1\130\3\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\2\23\1\131\13\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\10\23\1\132\1\23\1\130\3\23\10\0\1\23"+
    "\7\0\2\23\1\133\1\0\12\23\1\134\2\0\2\23"+
    "\6\0\2\23\1\135\13\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\1\136\1\137\3\23"+
    "\1\140\1\141\7\23\10\0\1\23\7\0\3\23\1\0"+
    "\1\142\12\23\2\0\2\23\6\0\6\23\1\143\7\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\11\23\1\144\4\23\10\0\1\23\27\0\1\145"+
    "\4\0\1\146\21\0\1\21\1\0\1\21\44\0\1\147"+
    "\17\0\1\52\1\0\1\21\66\0\1\21\64\0\1\150"+
    "\15\0\2\151\1\152\1\0\1\152\1\0\2\152\1\0"+
    "\2\152\1\0\5\152\2\0\2\152\6\0\16\152\7\0"+
    "\1\151\1\152\2\56\1\0\3\56\1\0\13\56\1\0"+
    "\15\56\1\0\25\56\2\0\1\153\65\0\3\62\1\0"+
    "\2\62\1\0\13\62\1\0\15\62\1\0\25\62\1\0"+
    "\4\65\1\0\1\65\1\0\13\65\1\0\15\65\1\0"+
    "\25\65\1\0\6\70\1\0\13\70\1\0\15\70\1\0"+
    "\25\70\2\0\1\154\67\0\1\155\146\0\1\156\14\0"+
    "\1\157\4\0\1\157\2\0\1\100\56\0\1\160\4\0"+
    "\1\160\10\0\1\161\6\0\1\161\41\0\1\122\4\0"+
    "\1\122\6\0\2\102\50\0\3\23\1\0\12\23\1\162"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\7\23\1\130\6\23"+
    "\10\0\1\23\4\163\1\0\5\163\1\0\54\163\10\0"+
    "\1\110\4\0\1\110\3\0\3\101\2\102\1\0\1\103"+
    "\46\0\3\23\1\0\13\23\2\0\2\23\6\0\7\23"+
    "\1\164\6\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\2\23\1\106\13\23\10\0\1\23"+
    "\7\0\3\23\1\0\1\165\12\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\13\23\1\130\2\23\10\0\1\23\7\0"+
    "\3\23\1\0\3\23\1\166\7\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\5\23\1\167\10\23\10\0\1\23\7\0"+
    "\3\23\1\0\1\23\1\130\11\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\11\23\1\170\4\23\10\0\1\23\10\0"+
    "\1\122\4\0\1\122\3\0\3\101\2\102\50\0\3\23"+
    "\1\0\3\23\1\171\7\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\35\0\1\21\67\0\1\21\37\0\3\23"+
    "\1\0\13\23\2\0\1\23\1\172\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\10\23\1\173\2\23\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\10\23\1\130\1\23\1\47"+
    "\3\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\10\23\1\174\5\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\1\23\1\175\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\10\23\1\176\5\23\10\0\1\23\7\0\3\23"+
    "\1\0\10\23\1\177\2\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\1\200\12\23\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\5\23\1\201\5\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\2\23\1\202\13\23\10\0\1\23\7\0\3\23\1\0"+
    "\1\23\1\203\11\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\1\23\1\204\14\23\10\0\1\23\7\0\3\23\1\0"+
    "\1\205\12\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\4\23"+
    "\1\130\11\23\10\0\1\23\27\0\1\21\115\0\1\21"+
    "\37\0\1\145\37\0\6\152\1\0\60\152\1\0\1\206"+
    "\66\0\1\207\75\0\1\157\4\0\1\157\2\0\1\100"+
    "\7\0\2\104\45\0\1\160\4\0\1\160\3\0\3\101"+
    "\53\0\1\160\4\0\1\160\60\0\3\23\1\0\5\23"+
    "\1\210\5\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\11\23"+
    "\1\211\4\23\10\0\1\23\7\0\3\23\1\0\12\23"+
    "\1\212\2\0\2\23\6\0\16\23\10\0\1\23\7\0"+
    "\2\23\1\213\1\0\13\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\6\23\1\214\7\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\2\23\1\215\13\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\6\23\1\216\7\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\2\23\1\217\13\23"+
    "\10\0\1\23\7\0\3\23\1\0\12\23\1\220\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\1\221\12\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\10\23"+
    "\1\222\5\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\6\23\1\223\7\23\10\0\1\23"+
    "\7\0\3\23\1\0\12\23\1\130\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\12\23\1\224"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\2\23\1\225\13\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\10\23\1\130\5\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\1\23\1\226\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\13\23\1\227\2\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\6\23\1\230\7\23\10\0"+
    "\1\23\62\0\1\231\13\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\1\23\1\232\1\233\7\23\1\234\1\235"+
    "\2\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\1\23\1\236\14\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\1\23\1\237"+
    "\14\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\7\23\1\240\6\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\7\23\1\241"+
    "\6\23\10\0\1\23\7\0\3\23\1\0\1\202\12\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\1\23\1\130\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\3\23\1\130\12\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\15\23\1\130\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\1\23"+
    "\1\242\14\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\1\23\1\243\14\23\10\0\1\23"+
    "\7\0\3\23\1\0\5\23\1\244\5\23\2\0\2\23"+
    "\6\0\16\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\6\23\1\245\7\23\10\0\1\23"+
    "\7\0\3\23\1\0\7\23\1\246\3\23\2\0\2\23"+
    "\6\0\16\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\6\23\1\247\7\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\1\23\1\250\6\0"+
    "\16\23\10\0\1\23\36\0\1\251\37\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\5\23\1\252\10\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\11\23\1\253\4\23\10\0\1\23\7\0\2\23\1\254"+
    "\1\0\13\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\6\23"+
    "\1\255\7\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\1\23\1\256\6\0\16\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\3\23\1\257"+
    "\12\23\10\0\1\23\7\0\3\23\1\0\12\23\1\260"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\1\23\1\261\14\23"+
    "\10\0\1\23\7\0\3\23\1\0\1\23\1\262\11\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\7\23\1\263\3\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\11\23\1\264\4\23\10\0\1\23\7\0\3\23"+
    "\1\0\10\23\1\265\2\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\7\23\1\130\3\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\10\23\1\266\5\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\1\23"+
    "\1\267\6\0\16\23\10\0\1\23\60\0\1\270\15\0"+
    "\3\23\1\0\3\23\1\271\7\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\6\23\1\272\7\23\10\0\1\23\7\0"+
    "\3\23\1\0\1\23\1\273\11\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\1\274\12\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\12\23\1\275\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\5\23\1\276\10\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\5\23\1\277\10\23\10\0"+
    "\1\23\7\0\3\23\1\0\3\23\1\130\7\23\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\2\23\1\300"+
    "\1\0\13\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\1\23"+
    "\1\203\14\23\10\0\1\23\7\0\3\23\1\0\1\301"+
    "\12\23\2\0\2\23\6\0\16\23\10\0\1\23\7\0"+
    "\3\23\1\0\5\23\1\302\5\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\12\23\1\303"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\12\23\1\216\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\62\0\1\304\13\0\3\23\1\0\1\305\12\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\14\23\1\306\1\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\12\23\1\307\3\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\1\23\1\310\14\23"+
    "\10\0\1\23\7\0\3\23\1\0\5\23\1\311\5\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\3\23"+
    "\1\0\5\23\1\312\5\23\2\0\2\23\6\0\16\23"+
    "\10\0\1\23\7\0\3\23\1\0\13\23\2\0\2\23"+
    "\6\0\10\23\1\313\5\23\10\0\1\23\7\0\3\23"+
    "\1\0\13\23\2\0\2\23\6\0\10\23\1\226\5\23"+
    "\10\0\1\23\7\0\3\23\1\0\12\23\1\314\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\11\23\1\315\1\316\3\23"+
    "\10\0\1\23\7\0\3\23\1\0\5\23\1\317\5\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\55\0\1\320"+
    "\20\0\3\23\1\0\12\23\1\321\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\2\23\1\322\1\0\13\23"+
    "\2\0\2\23\6\0\16\23\10\0\1\23\7\0\2\23"+
    "\1\323\1\0\13\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\6\23\1\324\7\23\10\0\1\23\7\0\3\23\1\0"+
    "\3\23\1\325\7\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\11\23\1\326\4\23\10\0\1\23\7\0\3\23\1\0"+
    "\5\23\1\327\5\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\10\23\1\330\2\23\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\1\331\12\23\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\1\332"+
    "\15\23\10\0\1\23\7\0\3\23\1\0\7\23\1\333"+
    "\3\23\2\0\2\23\6\0\16\23\10\0\1\23\42\0"+
    "\1\334\33\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\7\23\1\335\6\23\10\0\1\23\7\0\3\23\1\0"+
    "\12\23\1\336\2\0\2\23\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\7\23"+
    "\1\337\6\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\5\23\1\340\10\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\2\23"+
    "\1\341\13\23\10\0\1\23\7\0\3\23\1\0\1\342"+
    "\12\23\2\0\2\23\6\0\16\23\10\0\1\23\7\0"+
    "\3\23\1\0\12\23\1\343\2\0\2\23\6\0\1\23"+
    "\1\344\14\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\1\23\1\345\14\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\1\23"+
    "\1\346\14\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\6\23\1\326\7\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\2\23\6\0\2\23"+
    "\1\113\13\23\10\0\1\23\13\0\1\347\62\0\3\23"+
    "\1\0\12\23\1\350\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\5\23\1\351\5\23\2\0"+
    "\2\23\6\0\16\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\11\23\1\352\4\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\10\23\1\336\5\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\7\23\1\353\6\23\10\0"+
    "\1\23\7\0\3\23\1\0\12\23\1\354\2\0\2\23"+
    "\6\0\16\23\10\0\1\23\7\0\3\23\1\0\13\23"+
    "\2\0\2\23\6\0\15\23\1\120\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\7\23\1\120"+
    "\6\23\10\0\1\23\7\0\3\23\1\0\3\23\1\355"+
    "\7\23\2\0\2\23\6\0\16\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\13\23\1\355"+
    "\2\23\10\0\1\23\62\0\1\356\13\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\5\23\1\357\10\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\10\23\1\360\5\23\10\0\1\23\7\0\3\23\1\0"+
    "\13\23\2\0\2\23\6\0\10\23\1\361\5\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\7\23\1\362\6\23\10\0\1\23\7\0\3\23\1\0"+
    "\10\23\1\130\2\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\6\23\1\300\7\23\10\0\1\23\62\0\1\363\13\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\10\23\1\364"+
    "\5\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\6\23\1\365\7\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\1\23\1\366"+
    "\14\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\6\23\1\367\7\23\10\0\1\23\35\0"+
    "\1\370\24\0\1\363\13\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\6\23\1\371\7\23\10\0\1\23\7\0"+
    "\3\23\1\0\1\23\1\372\11\23\2\0\2\23\6\0"+
    "\16\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\13\23\1\322\2\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\5\23\1\354"+
    "\10\23\10\0\1\23\62\0\1\373\13\0\3\23\1\0"+
    "\13\23\2\0\1\23\1\374\6\0\16\23\10\0\1\23"+
    "\7\0\3\23\1\0\13\23\2\0\1\23\1\375\6\0"+
    "\16\23\10\0\1\23\3\0\1\21\72\0\3\23\1\0"+
    "\5\23\1\376\5\23\2\0\2\23\6\0\16\23\10\0"+
    "\1\23\7\0\3\23\1\0\13\23\2\0\2\23\6\0"+
    "\1\23\1\377\14\23\10\0\1\23\7\0\3\23\1\0"+
    "\10\23\1\u0100\2\23\2\0\2\23\6\0\10\23\1\360"+
    "\5\23\10\0\1\23\7\0\3\23\1\0\13\23\2\0"+
    "\2\23\6\0\5\23\1\217\10\23\10\0\1\23\7\0"+
    "\3\23\1\0\13\23\2\0\2\23\6\0\4\23\1\116"+
    "\11\23\10\0\1\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\10\1\1\11\11\1\1\11\20\1\1\11"+
    "\3\1\2\11\1\1\2\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\1\2\0\10\1\1\11\2\1\2\0\17\1"+
    "\2\0\1\1\2\0\1\1\2\11\1\1\1\0\2\1"+
    "\1\0\24\1\1\11\1\0\21\1\1\0\17\1\1\0"+
    "\16\1\1\0\13\1\1\0\13\1\1\0\13\1\1\0"+
    "\12\1\1\0\6\1\1\0\4\1\1\0\4\1\1\0"+
    "\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	public static final int FULL_STOP = TokenTypes.OPERATOR; // defining our tokens requires recompiling rsyntaxtextarea



	/** Marks all similar variables in same term; requires changing a couple of access qualifiers 

	in package org.fife.ui.rsyntaxtextarea */



	protected OccurrenceMarker createOccurrenceMarker() {

		return LogicProgramEditor.createOccurrenceMarker();

	}



	public boolean getMarkOccurrencesOfTokenType(int type) {

		return LogicProgramEditor.getMarkOccurrencesOfTokenType(type);

	}

	

	

	/**

	 * Constructor.  This must be here because JFlex does not generate a

	 * no-parameter constructor.

	 */

	public PrologTokenMaker() {

	}



	/**

	 * Adds the token specified to the current linked list of tokens.

	 *

	 * @param tokenType The token's type.

	 */

	protected void addToken(int tokenType) {

		addToken(zzStartRead, zzMarkedPos-1, tokenType);

	}



	/**

	 * Adds the token specified to the current linked list of tokens.

	 *

	 * @param tokenType The token's type.

	 * @see #addHyperlinkToken(int, int, int)

	 */

	protected void addToken(int start, int end, int tokenType) {

		int so = start + offsetShift;

		addToken(zzBuffer, start,end, tokenType, so, false);

	}



	/**

	 * Returns the text to place at the beginning and end of a

	 * line to "comment" it in a this programming language.

	 *

	 * @return <code>null</code>, as there are no comments in plain text.

	 */

	public String[] getLineCommentStartAndEnd() {

		return new String[] { "%", null };

	}





	/**

	 * Returns the first token in the linked list of tokens generated

	 * from <code>text</code>.  This method must be implemented by

	 * subclasses so they can correctly implement syntax highlighting.

	 *

	 * @param text The text from which to get tokens.

	 * @param initialTokenType The token type we should start with.

	 * @param startOffset The offset into the document at which

	 *        <code>text</code> starts.

	 * @return The first <code>Token</code> in a linked list representing

	 *         the syntax highlighted text.

	 */

	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {



		resetTokenList();

		this.offsetShift = -text.offset + startOffset;



		// Start off in the proper state.

		int state = Token.NULL;

		switch (initialTokenType) {

			case Token.COMMENT_MULTILINE:

				state = MLC;

				start = text.offset;

				break;

			case Token.COMMENT_DOCUMENTATION:

				state = DOCCOMMENT;

				start = text.offset;

				break;

			case Token.LITERAL_STRING_DOUBLE_QUOTE:

				state = MLS;

				start = text.offset;

				break;

			case Token.LITERAL_CHAR:

				state = MLA;

				start = text.offset;

				break;

			default:

				state = Token.NULL;

		}



		s = text;

		try {

			yyreset(zzReader);

			yybegin(state);

			return yylex();

		} catch (IOException ioe) {

			ioe.printStackTrace();

			return new TokenImpl();

		}



	}



	/**

	 * Refills the input buffer.

	 *

	 * @return      <code>true</code> if EOF was reached, otherwise

	 *              <code>false</code>.

	 * @exception   IOException  if any I/O-Error occurs.

	 */

	private boolean zzRefill() {

		return zzCurrentPos>=s.offset+s.count;

	}





	/**

	 * Resets the scanner to read from a new input stream.

	 * Does not close the old reader.

	 *

	 * All internal variables are reset, the old input stream 

	 * <b>cannot</b> be reused (internal buffer is discarded and lost).

	 * Lexical state is set to <tt>YY_INITIAL</tt>.

	 *

	 * @param reader   the new input stream 

	 */

	public final void yyreset(java.io.Reader reader) {

		// 's' has been updated.

		zzBuffer = s.array;

		/*

		 * We replaced the line below with the two below it because zzRefill

		 * no longer "refills" the buffer (since the way we do it, it's always

		 * "full" the first time through, since it points to the segment's

		 * array).  So, we assign zzEndRead here.

		 */

		//zzStartRead = zzEndRead = s.offset;

		zzStartRead = s.offset;

		zzEndRead = zzStartRead + s.count - 1;

		zzCurrentPos = zzMarkedPos = s.offset;

		zzLexicalState = YYINITIAL;

		zzReader = reader;

		zzAtBOL  = true;

		zzAtEOF  = false;

	}







  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PrologTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PrologTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { addToken(Token.PREPROCESSOR);
          }
        case 30: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 31: break;
        case 26: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 29: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 17: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 36: break;
        case 23: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 37: break;
        case 24: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { addToken(Token.RESERVED_WORD);
          }
        case 38: break;
        case 2: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 6: 
          { addToken(Token.VARIABLE);
          }
        case 41: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 42: break;
        case 8: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 18: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 45: break;
        case 9: 
          { addToken(FULL_STOP);
          }
        case 46: break;
        case 19: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 47: break;
        case 28: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 48: break;
        case 21: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 50: break;
        case 27: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 51: break;
        case 3: 
          { start = zzMarkedPos-1; yybegin(MLS);
          }
        case 52: break;
        case 4: 
          { start = zzMarkedPos-1; yybegin(MLA);
          }
        case 53: break;
        case 11: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 54: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 56: break;
        case 12: 
          { 
          }
        case 57: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 257: break;
            case MLS: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 258: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 259: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 260: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 261: break;
            case MLA: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 262: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
